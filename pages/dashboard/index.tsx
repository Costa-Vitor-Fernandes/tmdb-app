import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../../styles/Home.module.css";
import { useEffect, useState } from "react";
import { useRouter, withRouter } from "next/router";
import axios, { AxiosResponse } from "axios";


interface ListaItemProps {
  sessionId:any;
  apiKey: any;
  arrlistaId:any;
  queryRes: {
    [index:number]:{
    original_title: string;
    id: number;
    overview: string;
    poster_path:  string;
  },
};
}

interface ListaProps {
  apiKey: any;
  arrlistaId:any;
  sessionId:any;
}



const Dashboard: NextPage = () => {
  const [novoNomeLista, setNovoNomeLista] = useState<string>("");
  const [novoDescricao, setNovoDescricao] = useState<string>("");
  const [arrListaId, setArrListaId] = useState<number[]>();
  const [hasList, setHasList] = useState<boolean>(false);

  const router = useRouter();
  const user = router.query.user;
  const apiKey = router.query.apiKey;
  const sessionId = router.query.sessionId;

  useEffect(() => {
    // ve se o usuário que logou tem alguma lista, se sim, mostra a primeira e permite mudar de lista nos botoes
    axios.get(`https://api.themoviedb.org/3/account/{account_id}/lists?api_key=${apiKey}&language=en-US`,
        {
          params: {
            api_key: apiKey,
            session_id: sessionId,
          },
        }
      )
      .then((res) => {
        if (res.data.results) {
          setHasList(true);
          setArrListaId(res.data.results.map((r: any) => r.id));
        }

      });
  }, []);
// protege contra quem nao logou
  if (!user) {
    return (
      <div>
        <h1>Voce Precisa Logar</h1>
      </div>
    );
  } else {
    const criaLista = () => {

      if (!novoDescricao || !novoNomeLista) {
        return alert("Preencha os campos corretamente");
      }
      function postList() {
        setHasList(true);
        axios
          .post(
            `https://api.themoviedb.org/3/list?api_key=${router.query.apiKey}&session_id=${router.query.sessionId}`,
            {
              name: novoNomeLista,
              description: novoDescricao,
              language: "en",
            }
          )
          .then((res: AxiosResponse) => {
            if (!res.data.success) {
              return alert("algo deu errado");
            } else if (res.data.list_id) {
            }
          });
      }
      postList();
    };

    return (
      <div className={styles.container}>
        <Head>
          <title>Dashboard</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className="flex flex-col items-center">
          <h1 className="flex text-5xl p-10 ">Welcome {user}</h1>
          <section className="flex flex-col p-10 bg-indigo-100 sm:w-[90vw] sm:mx-20 ">
            <h3 className="text-2xl">Create a list</h3>
            <input
              className="mb-1"
              type={"text"}
              placeholder="Nome da sua lista"
              onChange={(e) => setNovoNomeLista(e.target.value)}
            />
            <input
              className="mb-1 pb-10"
              type={"text"}
              placeholder="Descrição"
              onChange={(e) => setNovoDescricao(e.target.value)}
            />
            <input
              className="bg-gray-100 hover:bg-green-500 rounded p-1"
              type={"button"}
              value="Criar"
              onClick={() => criaLista()}
            />
          </section>
          <section className="flex flex-col mt-1 sm:w-[90vw] sm:mx-20 p-10 sm:pt-5 sm:p-0">
            <div className="w-full">
              <h5 className="text-2xl text-center sm:text-5xl sm:pb-4">Your Lists:</h5>             
              {hasList ? (<Lista arrlistaId={arrListaId} apiKey={apiKey} sessionId={sessionId}/>) : (<p>You don't have any list</p>)}
            </div>
          </section>
        </main>

        <footer className={styles.footer}>
          <a
            href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Powered by{" "}
            <span className={styles.logo}>
            <Image src="/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg" alt="Vercel Logo" width={72} height={16} />
            </span>
          </a>
        </footer>
      </div>
    );
  }
};


const Lista: React.FC<ListaProps> = (props: ListaProps) => {
  // falta pegar os ids das listas do usuário com useEffect e axios
  // add botao pra trocar de lista
  // setar estado pra id da lista

  const [indexLista, setIndexLista] = useState<number>(0)
  const [nomeDaLista, setNomeDaLista] = useState<string>("")
  const [descricao, setDescricao] = useState<string>("")
  const [itemsDaLista, setItemsDaLista] = useState<[]>()
  const [procurando, setProcurando] = useState<boolean>(false);
  const [novoFilme, setNovoFilme] = useState<string>("");
  const [queryRes, setQueryRes] = useState<any>([]);

  useEffect(()=>{
      // pega nome descricao e items da lista
      axios.get(`https://api.themoviedb.org/3/list/${props.arrlistaId[indexLista]}?api_key=${props.apiKey}`).then((res)=>{
      setNomeDaLista(res.data.name)
      setDescricao(res.data.description)
      setItemsDaLista(res.data.items)
      })


  },[indexLista])

  interface ItemsDaLista{
    [index:number]:{
      original_title:string;
      poster_path:string;
    }
  }

  const deleteLista = () => {
    console.log("deleta lista", props.arrlistaId[indexLista], 'isso é apenas um log e não foi implementado');
  };


  const procuraFilme = () => {
    function procurar() {
      axios
        .get(
          `https://api.themoviedb.org/3/search/movie?api_key=${props.apiKey}&query=${novoFilme}`
        )
        .then((res) => {
          if (res.data.total_results === 0) {
            return alert("não tem nada aqui com esse titulo");
          } else {
         
            setQueryRes(res.data.results);
            setProcurando(true)
          }
        });
    }

    // protege contra o campo estar vazio
    if (novoFilme !== "") {
      procurar();
    }
    else return alert('preencha o campo corretamente')
    // return;
  };

  const FilmesListaSelecionada = () =>{
    if(itemsDaLista){ 
      console.log(itemsDaLista)
      const titulosInclusosNessaLista = itemsDaLista.map((e,i,arr:ItemsDaLista)=>{
      return <p>{i+1}-{arr[i].original_title}
      <div className="flex w-10 h-16 relative"><Image layout="fill" src={`https://image.tmdb.org/t/p/original${arr[i].poster_path}`}></Image></div>
      </p>
      })
      return titulosInclusosNessaLista
    }else
    return <p>This list exists ! But it does not have any movies yet</p>
}

  return (
    <section className="bg-indigo-100 ">
      <div className='flex flex-row justify-around'>
        <input className=" bg-gray-300 hover:bg-gray-100 focus:bg-gray-100" type={'button'} value="<" onClick={()=>{
          if(indexLista  === 0){
            setIndexLista(props.arrlistaId.length -1)
          }
          else{
            setIndexLista(indexLista-1)
          }
        }} />
      <h1>Lista id:{props.arrlistaId[indexLista]}</h1>
      <input className=" bg-gray-300 hover:bg-gray-100 focus:bg-gray-100" type={'button'} value=">" onClick={()=>{
          if(indexLista +1 === props.arrlistaId.length){
            setIndexLista(0)
       
          }
          else{
            setIndexLista(indexLista+1)
            
          }
        }}/>
      <input
        className="bg-red-500 rounded p-2 ml-5 hover:bg-red-300 focus:bg-red-300 pointer-events-auto"
        type={"button"}
        value="delete"
        onClick={() => deleteLista()}
        />
        </div>
        
     <div className="pl-2">

      <p className="text-2xl">Name:{nomeDaLista}</p>
      <p>Description:{descricao}</p>
      <p>Movies in this List:</p>
      {FilmesListaSelecionada()}
      {itemsDaLista?<p className="text-[2%]">amount of movies in this List:{itemsDaLista.length}</p> :null}
     </div>
      
      {/* isso aqui é um mockup pra um componente que ainda vai vir, que é o ItemDaLista */}
      <div className="flex flex-col justify-center text-center bg-indigo-300 pb-4 px-2 mt-2">
        <div className="flex-row ">


        <p className="pt-4 text-3xl">Add movies !</p>
        <input
        className="mt-4"
          type={"text"}
          placeholder="Add a new movie"
          onChange={(e) => setNovoFilme(e.target.value)}
          />
        <input
          className="bg-gray-100 hover:bg-indigo-400 rounded mx-2 px-2"
          type={"button"}
          value="Search"
          onClick={() => procuraFilme()}
          />
          </div>
          
      </div>
      {/* {retornoDaPesquisa? retornoDaPesquisa :null} */}
     {procurando ? <PesquisaItem arrlistaId={props.arrlistaId[indexLista]} sessionId={props.sessionId} apiKey={props.apiKey} queryRes={queryRes} /> :null} 
    </section>
  );
};


const PesquisaItem: React.FC<ListaItemProps> = (props: ListaItemProps) => {


  const [indexPesquisa, setIndexPesquisa] = useState<number>(0)

  const indexLength = Object.values(props.queryRes).length



  const adicionaFilme = () => {
    axios.post(`https://api.themoviedb.org/3/list/${props.arrlistaId}/add_item?api_key=${props.apiKey}&session_id=${props.sessionId}`,{
      media_id:props.queryRes[indexPesquisa].id
    })
  };

  return (
    <div className="flex flex-col bg-indigo-500 mt-2 mb-10">
       <div className='flex flex-row justify-around'>
     
     <input className=" bg-gray-300 hover:bg-gray-100 focus:bg-gray-100" type={'button'} value="<" onClick={()=>{
       if(indexPesquisa  === 0){ 
         setIndexPesquisa(indexLength -1)
       }
       else{
         setIndexPesquisa(indexPesquisa-1)
       }
     }} />
   <h1 className="text-2xl mb-2">Result</h1>
   <input className=" bg-gray-300 hover:bg-gray-100 focus:bg-gray-100" type={'button'} value=">" onClick={()=>{
       if(indexPesquisa +1 === indexLength){
         setIndexPesquisa(0)
                 }
       else{
         setIndexPesquisa(indexPesquisa+1)
       }
     }}/>
     </div>
      <div className="flex flex-row">
        <p className="text-lg leading-3 py-3 pl-3">Title:</p>
        <p className="text-md leading-3 py-3">
          {props.queryRes[indexPesquisa].original_title}
        </p>
      </div>
      <div className="flex justify-center self-center w-24 h-36 relative"><Image layout="fill" src={`https://image.tmdb.org/t/p/original${props.queryRes[indexPesquisa].poster_path}`}></Image></div>
      <p className="text-sm pl-4">id:{props.queryRes[indexPesquisa].id}</p>
      <p className="text-md pl-7 pr-3">overview: {props.queryRes[indexPesquisa].overview}</p>
      <input
        type={"button"}
        className="bg-gray-100 hover:bg-green-500 text-center rounded w-40 self-center mb-4"
        value="Adicionar na lista"
        onClick={() => adicionaFilme()}
      />
    </div>
  );
};

export default withRouter(Dashboard);
